name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libgl-dev libglu1-mesa-dev \
              libx11-devlibx11-xcb-dev \
              libfontenc-dev \
              libice-dev \
              libsm-dev \
              libxau-dev \
              libxaw7-dev \
              libxcomposite-dev \
              libxcursor-dev \
              libxdamage-dev \
              libxdmcp-dev \
              libxext-dev \
              libxfixes-dev \
              libxft-dev \
              libxi-dev \
              libxinerama-dev \
              libxkbfile-dev \
              libxmu-dev \
              libxmuu-dev \
              libxpm-dev \
              libxrandr-dev \
              libxrender-dev \
              libxres-dev \
              libxss-dev \
              libxt-dev \
              libxtst-dev \
              libxv-dev \
              libxvmc-dev \
              libxxf86vm-dev \
              xtrans-dev \
              libxcb-render0-dev \
              libxcb-render-util0-dev \
              libxcb-xkb-dev \
              libxcb-icccm4-dev \
              libxcb-image0-dev \
              libxcb-keysyms1-dev \
              libxcb-randr0-dev \
              libxcb-shape0-dev \
              libxcb-sync-dev \
              libxcb-xfixes0-dev \
              libxcb-xinerama0-dev \
              xkb-data \
              libxcb-dri3-dev \
              uuid-dev \
              libxcb-util-dev 
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install conan
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan install conanfile.txt -if ${{ "{{" }}github.workspace{{ "}}" }}/build
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{ "{{" }}github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ "{{" }}env.BUILD_TYPE{{ "}}" }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{ "{{" }}github.workspace{{ "}}" }}/build --config ${{ "{{" }}env.BUILD_TYPE{{ "}}" }}

      - name: Test
        working-directory: ${{ "{{" }}github.workspace{{ "}}" }}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ "{{" }}env.BUILD_TYPE{{ "}}" }}

      - name: Benchmark
        working-directory: ${{ "{{" }}github.workspace{{ "}}" }}/build
        # Execute benchmarks defined by the CMake configuration.
        run: ./bin/bench_*